// Language Context and Management System
// Provides global language state for the entire Vimarsh application

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

// Supported languages in Vimarsh
export type Language = 'English' | 'Hindi';
export type LanguageCode = 'en' | 'hi';

// Language configuration
export const languageConfig = {
  English: {
    code: 'en' as LanguageCode,
    name: 'English',
    nativeName: 'English',
    flag: 'üá∫üá∏',
    direction: 'ltr' as 'ltr' | 'rtl',
    voiceCode: 'en-US',
    scriptureLanguage: 'English',
    culturalGreeting: 'Namaste'
  },
  Hindi: {
    code: 'hi' as LanguageCode,
    name: 'Hindi',
    nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä',
    flag: 'üáÆüá≥',
    direction: 'ltr' as 'ltr' | 'rtl',
    voiceCode: 'hi-IN',
    scriptureLanguage: 'Sanskrit-Hindi',
    culturalGreeting: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á'
  }
} as const;

// Translations for UI elements
export const translations = {
  English: {
    // Authentication
    signIn: 'Sign In',
    signOut: 'Sign Out',
    greeting: 'Namaste',
    welcome: 'Welcome to Vimarsh',
    welcomeMessage: 'Connect with the divine wisdom of ancient scriptures. Please sign in to begin your spiritual journey.',
    
    // Navigation and UI
    spiritualGuidance: 'Spiritual Guidance',
    voiceInput: 'Voice Input',
    textInput: 'Text Input',
    send: 'Send',
    clear: 'Clear',
    listening: 'Listening...',
    processing: 'Processing your question...',
    
    // Voice Interface
    startListening: 'Start Voice Input',
    stopListening: 'Stop Listening',
    playResponse: 'Play Response',
    pauseResponse: 'Pause Response',
    voiceNotSupported: 'Voice recognition not supported in this browser',
    
    // Chat and Responses
    askQuestion: 'Ask your spiritual question...',
    citations: 'Sources',
    relatedVerses: 'Related Verses',
    moreFromThisSource: 'More from this source',
    
    // Spiritual Content
    bhagavadGita: 'Bhagavad Gita',
    mahabharata: 'Mahabharata',
    srimadBhagavatam: 'Srimad Bhagavatam',
    chapter: 'Chapter',
    verse: 'Verse',
    
    // Features
    conversationHistory: 'Conversation History',
    searchHistory: 'Search History',
    exportChat: 'Export Conversation',
    clearHistory: 'Clear History',
    
    // New Conversation History Features
    newConversation: 'New Conversation',
    new: 'New',
    searchConversations: 'Search conversations...',
    sessions: 'sessions',
    messages: 'messages',
    exportTxt: 'Export Text',
    exportJson: 'Export JSON',
    exporting: 'Exporting',
    noSearchResults: 'No conversations found',
    tryDifferentSearch: 'Try a different search term',
    noConversations: 'No conversations yet',
    startFirstConversation: 'Start your first spiritual conversation',
    exportSession: 'Export this conversation',
    deleteSession: 'Delete conversation',
    confirmDelete: 'Confirm Delete',
    deleteSessionWarning: 'This conversation will be permanently deleted. This action cannot be undone.',
    cancel: 'Cancel',
    delete: 'Delete',
    today: 'Today',
    yesterday: 'Yesterday',
    daysAgo: 'days ago',
    recentConversations: 'Recent Conversations',
    
    // Conversation Archive Features
    conversationArchive: 'Conversation Archive',
    advancedSearch: 'Advanced Search',
    language: 'Language',
    allLanguages: 'All Languages',
    dateRange: 'Date Range',
    allTime: 'All Time',
    thisWeek: 'This Week',
    thisMonth: 'This Month',
    thisYear: 'This Year',
    minimumMessages: 'Minimum Messages',
    conversationsFound: 'conversations found',
    selected: 'selected',
    selectAll: 'Select All',
    clearSelection: 'Clear Selection',
    exportSelected: 'Export Selected',
    matchingMessages: 'matching messages',
    you: 'You',
    lordKrishna: 'Lord Krishna',
    moreMatches: 'more matches',
    
    // Errors and States
    errorOccurred: 'An error occurred. Please try again.',
    networkError: 'Network connection issue. Please check your internet.',
    loadingWisdom: 'Loading divine wisdom...',
    noInternet: 'No internet connection detected.',
    
    // Footer and Legal
    guidedByWisdom: 'Guided by ancient wisdom, powered by modern technology',
    karmaQuote: 'You have the right to perform action, but not to the fruits of action',
    
    // Language Switching
    switchToHindi: 'Switch to Hindi',
    switchToEnglish: 'Switch to English',
    languageChanged: 'Language changed to English',
    
    // Responsive Design Features
    welcomeToVimarsh: 'Welcome to Vimarsh',
    pleaseSignIn: 'Please sign in to continue',
    hideHistory: 'Hide conversation history',
    showHistory: 'Show conversation history',
    hideArchive: 'Hide conversation archive',
    showArchive: 'Show conversation archive',
    startConversation: 'Start your spiritual journey by asking a question',
    lordKrishnaIsTyping: 'Lord Krishna is responding...',
    sending: 'Sending...',
    
    // Accessibility
    skipToMainContent: 'Skip to main content',
    spiritualGuidanceApp: 'Spiritual Guidance Application',
    conversationControls: 'Conversation controls',
    welcomeHeading: 'Welcome section',
    conversationMessages: 'Conversation messages',
    yourMessage: 'Your message',
    lordKrishnaMessage: 'Lord Krishna\'s message',
    lordKrishnaResponse: 'Lord Krishna\'s response',
    
    // Notification Settings
    notificationSettings: 'Notification Settings',
    enableNotifications: 'Enable Notifications',
    disableNotifications: 'Disable Notifications',
    notificationsDescription: 'Receive daily spiritual wisdom and meditation reminders',
    notificationPermissionDenied: 'Notification permission was denied. Please enable in browser settings.',
    notificationError: 'Failed to enable notifications. Please try again.',
    notificationsNotSupported: 'Notifications Not Supported',
    notificationsSupportDescription: 'Your browser doesn\'t support push notifications.',
    enabled: 'Enabled',
    disabled: 'Disabled',
    enable: 'Enable',
    enabling: 'Enabling...',
    close: 'Close',
    notificationTypes: 'Notification Types',
    dailyWisdom: 'Daily Wisdom',
    meditationReminders: 'Meditation Reminders',
    spiritualQuotes: 'Spiritual Quotes',
    teachings: 'Teachings',
    timingSettings: 'Timing Settings',
    preferredTime: 'Preferred Time',
    frequency: 'Frequency',
    daily: 'Daily',
    everyOtherDay: 'Every Other Day',
    weekly: 'Weekly',
    notificationLanguage: 'Notification Language',
    english: 'English',
    hindi: 'Hindi',
    testNotification: 'Test Notification',
    testNotificationDescription: 'Send a test notification to verify settings',
    sendTest: 'Send Test',
    testNotificationFailed: 'Failed to send test notification'
  },
  
  Hindi: {
    // Authentication
    signIn: '‡§∏‡§æ‡§á‡§® ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç',
    signOut: '‡§∏‡§æ‡§á‡§® ‡§Ü‡§â‡§ü',
    greeting: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á',
    welcome: '‡§µ‡§ø‡§Æ‡§∞‡•ç‡§∂ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
    welcomeMessage: '‡§™‡•ç‡§∞‡§æ‡§ö‡•Ä‡§® ‡§∂‡§æ‡§∏‡•ç‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§¶‡§ø‡§µ‡•ç‡§Ø ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç‡•§ ‡§Ö‡§™‡§®‡•Ä ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§æ‡§á‡§® ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç‡•§',
    
    // Navigation and UI
    spiritualGuidance: '‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®',
    voiceInput: '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§á‡§®‡§™‡•Å‡§ü',
    textInput: '‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§á‡§®‡§™‡•Å‡§ü',
    send: '‡§≠‡•á‡§ú‡•á‡§Ç',
    clear: '‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç',
    listening: '‡§∏‡•Å‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...',
    processing: '‡§Ü‡§™‡§ï‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...',
    
    // Responsive Design Features
    welcomeToVimarsh: '‡§µ‡§ø‡§Æ‡§∞‡•ç‡§∂ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
    pleaseSignIn: '‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§æ‡§á‡§® ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç',
    hideHistory: '‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§õ‡•Å‡§™‡§æ‡§è‡§Ç',
    showHistory: '‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç',
    hideArchive: '‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π ‡§õ‡•Å‡§™‡§æ‡§è‡§Ç',
    showArchive: '‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç',
    startConversation: '‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡§ï‡§∞ ‡§Ö‡§™‡§®‡•Ä ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç',
    lordKrishnaIsTyping: '‡§≠‡§ó‡§µ‡§æ‡§® ‡§ï‡•É‡§∑‡•ç‡§£ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...',
    sending: '‡§≠‡•á‡§ú ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...',
    
    // Accessibility
    skipToMainContent: '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç',
    spiritualGuidanceApp: '‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§Ö‡§®‡•Å‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó',
    conversationControls: '‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£',
    welcomeHeading: '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§Ö‡§®‡•Å‡§≠‡§æ‡§ó',
    conversationMessages: '‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§∏‡§Ç‡§¶‡•á‡§∂',
    yourMessage: '‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂',
    lordKrishnaMessage: '‡§≠‡§ó‡§µ‡§æ‡§® ‡§ï‡•É‡§∑‡•ç‡§£ ‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂',
    lordKrishnaResponse: '‡§≠‡§ó‡§µ‡§æ‡§® ‡§ï‡•É‡§∑‡•ç‡§£ ‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞',
    
    // Notification Settings
    notificationSettings: '‡§∏‡•Ç‡§ö‡§®‡§æ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',
    enableNotifications: '‡§∏‡•Ç‡§ö‡§®‡§æ‡§è‡§Ç ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡•á‡§Ç',
    disableNotifications: '‡§∏‡•Ç‡§ö‡§®‡§æ‡§è‡§Ç ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç',
    notificationsDescription: '‡§¶‡•à‡§®‡§ø‡§ï ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§ú‡•ç‡§û‡§æ‡§® ‡§î‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§Ö‡§®‡•Å‡§∏‡•ç‡§Æ‡§æ‡§∞‡§ï ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç',
    notificationPermissionDenied: '‡§∏‡•Ç‡§ö‡§®‡§æ ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡•á‡§Ç‡•§',
    notificationError: '‡§∏‡•Ç‡§ö‡§®‡§æ‡§è‡§Ç ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§',
    notificationsNotSupported: '‡§∏‡•Ç‡§ö‡§®‡§æ‡§è‡§Ç ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç',
    notificationsSupportDescription: '‡§Ü‡§™‡§ï‡§æ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§™‡•Å‡§∂ ‡§∏‡•Ç‡§ö‡§®‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§',
    enabled: '‡§ö‡§æ‡§≤‡•Ç',
    disabled: '‡§¨‡§Ç‡§¶',
    enable: '‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡•á‡§Ç',
    enabling: '‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...',
    close: '‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç',
    notificationTypes: '‡§∏‡•Ç‡§ö‡§®‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞',
    dailyWisdom: '‡§¶‡•à‡§®‡§ø‡§ï ‡§ú‡•ç‡§û‡§æ‡§®',
    meditationReminders: '‡§ß‡•ç‡§Ø‡§æ‡§® ‡§Ö‡§®‡•Å‡§∏‡•ç‡§Æ‡§æ‡§∞‡§ï',
    spiritualQuotes: '‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§â‡§¶‡•ç‡§ß‡§∞‡§£',
    teachings: '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ‡§è‡§Ç',
    timingSettings: '‡§∏‡§Æ‡§Ø ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',
    preferredTime: '‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§∏‡§Æ‡§Ø',
    frequency: '‡§Ü‡§µ‡•É‡§§‡•ç‡§§‡§ø',
    daily: '‡§¶‡•à‡§®‡§ø‡§ï',
    everyOtherDay: '‡§π‡§∞ ‡§¶‡•Ç‡§∏‡§∞‡•á ‡§¶‡§ø‡§®',
    weekly: '‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï',
    notificationLanguage: '‡§∏‡•Ç‡§ö‡§®‡§æ ‡§≠‡§æ‡§∑‡§æ',
    english: '‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä',
    hindi: '‡§π‡§ø‡§Ç‡§¶‡•Ä',
    testNotification: '‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§∏‡•Ç‡§ö‡§®‡§æ',
    testNotificationDescription: '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§≠‡•á‡§ú‡•á‡§Ç',
    sendTest: '‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§≠‡•á‡§ú‡•á‡§Ç',
    testNotificationFailed: '‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤',
    
    // Voice Interface
    startListening: '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•Å‡§®‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç',
    stopListening: '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•Å‡§®‡§®‡§æ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç',
    playResponse: '‡§â‡§§‡•ç‡§§‡§∞ ‡§∏‡•Å‡§®‡•á‡§Ç',
    pauseResponse: '‡§∞‡•ã‡§ï‡•á‡§Ç',
    voiceNotSupported: '‡§á‡§∏ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§Æ‡•á‡§Ç ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§™‡§π‡§ö‡§æ‡§® ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à',
    
    // Chat and Responses
    askQuestion: '‡§Ö‡§™‡§®‡§æ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç...',
    citations: '‡§∏‡•ç‡§∞‡•ã‡§§',
    relatedVerses: '‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§∂‡•ç‡§≤‡•ã‡§ï',
    moreFromThisSource: '‡§á‡§∏ ‡§∏‡•ç‡§∞‡•ã‡§§ ‡§∏‡•á ‡§î‡§∞',
    
    // Spiritual Content
    bhagavadGita: '‡§≠‡§ó‡§µ‡§¶‡•ç‡§ó‡•Ä‡§§‡§æ',
    mahabharata: '‡§Æ‡§π‡§æ‡§≠‡§æ‡§∞‡§§',
    srimadBhagavatam: '‡§∂‡•ç‡§∞‡•Ä‡§Æ‡§¶‡•ç‡§≠‡§æ‡§ó‡§µ‡§§‡§Æ‡•ç',
    chapter: '‡§Ö‡§ß‡•ç‡§Ø‡§æ‡§Ø',
    verse: '‡§∂‡•ç‡§≤‡•ã‡§ï',
    
    // Features
    conversationHistory: '‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡§æ ‡§á‡§§‡§ø‡§π‡§æ‡§∏',
    searchHistory: '‡§ñ‡•ã‡§ú ‡§á‡§§‡§ø‡§π‡§æ‡§∏',
    exportChat: '‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç',
    clearHistory: '‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç',
    
    // New Conversation History Features
    newConversation: '‡§®‡§Ø‡§æ ‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™',
    new: '‡§®‡§Ø‡§æ',
    searchConversations: '‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§ñ‡•ã‡§ú‡•á‡§Ç...',
    sessions: '‡§∏‡§§‡•ç‡§∞',
    messages: '‡§∏‡§Ç‡§¶‡•á‡§∂',
    exportTxt: '‡§™‡§æ‡§† ‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç',
    exportJson: 'JSON ‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç',
    exporting: '‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§§ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç',
    noSearchResults: '‡§ï‡•ã‡§à ‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ',
    tryDifferentSearch: '‡§Ö‡§≤‡§ó ‡§ñ‡•ã‡§ú ‡§∂‡§¨‡•ç‡§¶ ‡§Ü‡§ú‡§º‡§Æ‡§æ‡§è‡§Ç',
    noConversations: '‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§®‡§π‡•Ä‡§Ç',
    startFirstConversation: '‡§Ö‡§™‡§®‡§æ ‡§™‡§π‡§≤‡§æ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç',
    exportSession: '‡§á‡§∏ ‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§ï‡•ã ‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç',
    deleteSession: '‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§π‡§ü‡§æ‡§è‡§Ç',
    confirmDelete: '‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡•á‡§Ç',
    deleteSessionWarning: '‡§Ø‡§π ‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§ ‡§Ø‡§π ‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§µ‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡•Ä ‡§ú‡§æ ‡§∏‡§ï‡§§‡•Ä‡•§',
    cancel: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç',
    delete: '‡§π‡§ü‡§æ‡§è‡§Ç',
    today: '‡§Ü‡§ú',
    yesterday: '‡§ï‡§≤',
    daysAgo: '‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á',
    recentConversations: '‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§',
    
    // Conversation Archive Features
    conversationArchive: '‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π',
    advancedSearch: '‡§â‡§®‡•ç‡§®‡§§ ‡§ñ‡•ã‡§ú',
    language: '‡§≠‡§æ‡§∑‡§æ',
    allLanguages: '‡§∏‡§≠‡•Ä ‡§≠‡§æ‡§∑‡§æ‡§è‡§Å',
    dateRange: '‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï ‡§∏‡•Ä‡§Æ‡§æ',
    allTime: '‡§∏‡§≠‡•Ä ‡§∏‡§Æ‡§Ø',
    thisWeek: '‡§á‡§∏ ‡§∏‡§™‡•ç‡§§‡§æ‡§π',
    thisMonth: '‡§á‡§∏ ‡§Æ‡§π‡•Ä‡§®‡•á',
    thisYear: '‡§á‡§∏ ‡§µ‡§∞‡•ç‡§∑',
    minimumMessages: '‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§∏‡§Ç‡§¶‡•á‡§∂',
    conversationsFound: '‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§Æ‡§ø‡§≤‡•Ä',
    selected: '‡§ö‡•Å‡§®‡§æ ‡§ó‡§Ø‡§æ',
    selectAll: '‡§∏‡§≠‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç',
    clearSelection: '‡§ö‡§Ø‡§® ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç',
    exportSelected: '‡§ö‡§Ø‡§®‡§ø‡§§ ‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç',
    matchingMessages: '‡§Æ‡•á‡§≤ ‡§ñ‡§æ‡§§‡•á ‡§∏‡§Ç‡§¶‡•á‡§∂',
    you: '‡§Ü‡§™',
    lordKrishna: '‡§≠‡§ó‡§µ‡§æ‡§® ‡§ï‡•É‡§∑‡•ç‡§£',
    moreMatches: '‡§î‡§∞ ‡§Æ‡•à‡§ö',
    
    // Errors and States
    errorOccurred: '‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§',
    networkError: '‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç‡•§',
    loadingWisdom: '‡§¶‡§ø‡§µ‡•ç‡§Ø ‡§ú‡•ç‡§û‡§æ‡§® ‡§≤‡•ã‡§° ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...',
    noInternet: '‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§',
    
    // Footer and Legal
    guidedByWisdom: '‡§™‡•ç‡§∞‡§æ‡§ö‡•Ä‡§® ‡§ú‡•ç‡§û‡§æ‡§® ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§ø‡§§, ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§§‡§ï‡§®‡•Ä‡§ï ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§',
    karmaQuote: '‡§ï‡§∞‡•ç‡§Æ‡§£‡•ç‡§Ø‡•á‡§µ‡§æ‡§ß‡§ø‡§ï‡§æ‡§∞‡§∏‡•ç‡§§‡•á ‡§Æ‡§æ ‡§´‡§≤‡•á‡§∑‡•Å ‡§ï‡§¶‡§æ‡§ö‡§®',
    
    // Language Switching
    switchToHindi: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç',
    switchToEnglish: '‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç',
    languageChanged: '‡§≠‡§æ‡§∑‡§æ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§ó‡§à'
  }
} as const;

// Language context interface
interface LanguageContextType {
  currentLanguage: Language;
  currentLanguageConfig: typeof languageConfig[Language];
  translations: typeof translations[Language];
  setLanguage: (language: Language) => void;
  toggleLanguage: () => void;
  t: (key: keyof typeof translations[Language]) => string;
  isRTL: boolean;
}

// Create language context
const LanguageContext = createContext<LanguageContextType | null>(null);

// Custom hook to use language context
export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

// Language provider props
interface LanguageProviderProps {
  children: ReactNode;
  defaultLanguage?: Language;
}

// Language provider component
export const LanguageProvider: React.FC<LanguageProviderProps> = ({ 
  children, 
  defaultLanguage = 'English' 
}) => {
  const [currentLanguage, setCurrentLanguage] = useState<Language>(() => {
    // Try to get saved language from localStorage
    const saved = localStorage.getItem('vimarsh_language');
    if (saved && (saved === 'English' || saved === 'Hindi')) {
      return saved as Language;
    }
    
    // Try to detect user's browser language
    const browserLang = navigator.language;
    if (browserLang.startsWith('hi')) {
      return 'Hindi';
    }
    
    return defaultLanguage;
  });

  // Update document language and direction when language changes
  useEffect(() => {
    const config = languageConfig[currentLanguage];
    document.documentElement.lang = config.code;
    document.documentElement.dir = config.direction;
    
    // Save to localStorage
    localStorage.setItem('vimarsh_language', currentLanguage);
    
    // Update page title based on language
    document.title = currentLanguage === 'English' 
      ? 'Vimarsh - Spiritual AI Guidance'
      : '‡§µ‡§ø‡§Æ‡§∞‡•ç‡§∂ - ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï AI ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®';
      
    console.log(`üåç Language changed to ${currentLanguage} (${config.code})`);
  }, [currentLanguage]);

  // Set language function
  const setLanguage = (language: Language) => {
    setCurrentLanguage(language);
  };

  // Toggle between English and Hindi
  const toggleLanguage = () => {
    setCurrentLanguage(prev => prev === 'English' ? 'Hindi' : 'English');
  };

  // Translation function
  const t = (key: keyof typeof translations[Language]): string => {
    return translations[currentLanguage][key] || key;
  };

  // Current language configuration
  const currentLanguageConfig = languageConfig[currentLanguage];
  const currentTranslations = translations[currentLanguage];
  const isRTL = currentLanguageConfig.direction === 'rtl';

  const contextValue: LanguageContextType = {
    currentLanguage,
    currentLanguageConfig,
    translations: currentTranslations,
    setLanguage,
    toggleLanguage,
    t,
    isRTL
  };

  return (
    <LanguageContext.Provider value={contextValue}>
      {children}
    </LanguageContext.Provider>
  );
};

// Export language utilities
export const getLanguageCode = (language: Language): LanguageCode => {
  return languageConfig[language].code;
};

export const getLanguageFromCode = (code: LanguageCode): Language => {
  return code === 'hi' ? 'Hindi' : 'English';
};

export const getSupportedLanguages = (): Language[] => {
  return Object.keys(languageConfig) as Language[];
};

// Export for easy import
export default LanguageProvider;
