/**
 * Test suite for ConversationHistory component
 * 
 * Tests conversation history management for spiritual guidance sessions,
 * including search functionality, session management, and spiritual content preservation.
 */

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';
import ConversationHistory from './ConversationHistory';

// Mock MSAL React
jest.mock('@azure/msal-react', () => ({
  useMsal: () => ({
    accounts: [{ name: 'Test User', username: 'test@example.com' }],
    instance: {
      getActiveAccount: () => ({ name: 'Test User', username: 'test@example.com' })
    }
  }),
  useIsAuthenticated: () => true,
  MsalProvider: ({ children }: { children: React.ReactNode }) => <div>{children}</div>
}));

// Mock the conversation history utility
jest.mock('../utils/conversationHistory', () => ({
  conversationHistory: {
    getSessions: jest.fn(() => [
      {
        id: 'session-1',
        title: 'Understanding Dharma',
        timestamp: new Date('2024-01-15T10:30:00Z'),
        messageCount: 5,
        lastMessage: 'Thank you for explaining dharma, Krishna.',
        spiritualTopics: ['dharma', 'duty', 'righteousness'],
        language: 'en'
      },
      {
        id: 'session-2', 
        title: 'Path to Moksha',
        timestamp: new Date('2024-01-14T15:20:00Z'),
        messageCount: 8,
        lastMessage: 'How can one achieve liberation from the cycle of birth and death?',
        spiritualTopics: ['moksha', 'liberation', 'rebirth'],
        language: 'en'
      },
      {
        id: 'session-3',
        title: 'कर्म और भक्ति',
        timestamp: new Date('2024-01-13T09:15:00Z'),
        messageCount: 6,
        lastMessage: 'कृष्ण जी, कर्म योग क्या है?',
        spiritualTopics: ['karma', 'bhakti', 'yoga'],
        language: 'hi'
      }
    ]),
    searchSessions: jest.fn((query) => {
      const sessions = [
        {
          id: 'session-1',
          title: 'Understanding Dharma',
          timestamp: new Date('2024-01-15T10:30:00Z'),
          messageCount: 5,
          lastMessage: 'Thank you for explaining dharma, Krishna.',
          spiritualTopics: ['dharma', 'duty', 'righteousness'],
          language: 'en'
        }
      ];
      return sessions.filter(s => 
        s.title.toLowerCase().includes(query.toLowerCase()) ||
        s.spiritualTopics.some(topic => topic.toLowerCase().includes(query.toLowerCase()))
      );
    }),
    deleteSession: jest.fn(),
    exportSessions: jest.fn(() => Promise.resolve('exported-data')),
    getStorageStats: jest.fn().mockReturnValue({
      totalSessions: 3,
      totalMessages: 19,
      oldestSession: new Date('2024-01-13T09:15:00Z'),
      storageSize: 1024
    })
  }
}));

// Mock language context
jest.mock('../contexts/LanguageContext', () => ({
  useLanguage: () => ({
    t: (key: string) => key,
    currentLanguage: 'English'
  })
}));

// Mock authentication
jest.mock('./AuthenticationWrapper', () => ({
  useAuth: () => ({
    user: { id: 'user123', name: 'Test User' }
  })
}));

describe('ConversationHistory', () => {
  const mockOnSessionSelect = jest.fn();
  const mockOnNewConversation = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Basic Rendering', () => {
    test('displays conversation sessions', () => {
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      expect(screen.getByText('Understanding Dharma')).toBeInTheDocument();
      expect(screen.getByText('Path to Moksha')).toBeInTheDocument();
      expect(screen.getByText('कर्म और भक्ति')).toBeInTheDocument();
    });

    test('shows spiritual topics for each session', () => {
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      // Check for spiritual topics display
      expect(screen.getByText(/dharma/)).toBeInTheDocument();
      expect(screen.getByText(/moksha/)).toBeInTheDocument();
      expect(screen.getByText(/karma/)).toBeInTheDocument();
    });

    test('displays session timestamps and message counts', () => {
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      expect(screen.getByText(/5 messages/i)).toBeInTheDocument();
      expect(screen.getByText(/8 messages/i)).toBeInTheDocument();
      expect(screen.getByText(/6 messages/i)).toBeInTheDocument();
    });
  });

  describe('Spiritual Content Search', () => {
    test('searches by spiritual topic', async () => {
      const user = userEvent.setup();
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      const searchInput = screen.getByPlaceholderText(/search conversations/i);
      await user.type(searchInput, 'dharma');

      await waitFor(() => {
        expect(screen.getByText('Understanding Dharma')).toBeInTheDocument();
        expect(screen.queryByText('Path to Moksha')).not.toBeInTheDocument();
      });
    });

    test('searches by conversation title', async () => {
      const user = userEvent.setup();
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      const searchInput = screen.getByPlaceholderText(/search conversations/i);
      await user.type(searchInput, 'moksha');

      await waitFor(() => {
        expect(screen.getByText('Path to Moksha')).toBeInTheDocument();
        expect(screen.queryByText('Understanding Dharma')).not.toBeInTheDocument();
      });
    });

    test('handles Sanskrit and Hindi search terms', async () => {
      const user = userEvent.setup();
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      const searchInput = screen.getByPlaceholderText(/search conversations/i);
      await user.type(searchInput, 'कर्म');

      await waitFor(() => {
        expect(screen.getByText('कर्म और भक्ति')).toBeInTheDocument();
      });
    });

    test('clears search results appropriately', async () => {
      const user = userEvent.setup();
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      const searchInput = screen.getByPlaceholderText(/search conversations/i);
      await user.type(searchInput, 'dharma');
      await user.clear(searchInput);

      await waitFor(() => {
        expect(screen.getByText('Understanding Dharma')).toBeInTheDocument();
        expect(screen.getByText('Path to Moksha')).toBeInTheDocument();
        expect(screen.getByText('कर्म और भक्ति')).toBeInTheDocument();
      });
    });
  });

  describe('Session Management', () => {
    test('selects session when clicked', async () => {
      const user = userEvent.setup();
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      const dharmaSession = screen.getByText('Understanding Dharma');
      await user.click(dharmaSession);

      expect(mockOnSessionSelect).toHaveBeenCalledWith('session-1');
    });

    test('highlights current session', () => {
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId="session-2"
          onNewConversation={mockOnNewConversation}
        />
      );

      const currentSession = screen.getByText('Path to Moksha').closest('[data-current="true"], .current, .active');
      expect(currentSession).toBeInTheDocument();
    });

    test('creates new conversation', async () => {
      const user = userEvent.setup();
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      const newConversationButton = screen.getByText(/new conversation/i);
      await user.click(newConversationButton);

      expect(mockOnNewConversation).toHaveBeenCalled();
    });

    test('deletes session with confirmation', async () => {
      const user = userEvent.setup();
      const { conversationHistory } = require('../utils/conversationHistory');
      
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      // Find and click delete button for first session
      const deleteButtons = screen.getAllByText(/delete/i);
      await user.click(deleteButtons[0]);

      // Confirm deletion
      const confirmButton = screen.getByText(/confirm/i);
      await user.click(confirmButton);

      expect(conversationHistory.deleteSession).toHaveBeenCalledWith('session-1');
    });
  });

  describe('Multilingual Support', () => {
    test('displays Hindi conversation titles correctly', () => {
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      expect(screen.getByText('कर्म और भक्ति')).toBeInTheDocument();
    });

    test('shows language indicators for sessions', () => {
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      // Should show language indicators (EN/HI)
      expect(screen.getByText(/EN/i) || screen.getByText(/English/i)).toBeInTheDocument();
      expect(screen.getByText(/HI/i) || screen.getByText(/Hindi/i)).toBeInTheDocument();
    });
  });

  describe('Export Functionality', () => {
    test('exports conversation history', async () => {
      const user = userEvent.setup();
      const { conversationHistory } = require('../utils/conversationHistory');
      
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      const exportButton = screen.getByText(/export/i);
      await user.click(exportButton);

      expect(conversationHistory.exportSessions).toHaveBeenCalled();
    });

    test('handles export loading state', async () => {
      const user = userEvent.setup();
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      const exportButton = screen.getByText(/export/i);
      await user.click(exportButton);

      // Should show loading state during export
      expect(screen.getByText(/exporting/i) || exportButton).toBeDisabled();
    });
  });

  describe('Spiritual Content Preservation', () => {
    test('maintains Sanskrit text formatting in history', () => {
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      // Sanskrit and Devanagari text should be preserved
      const hindiTitle = screen.getByText('कर्म और भक्ति');
      expect(hindiTitle).toHaveAttribute('lang', 'hi');
    });

    test('shows spiritual context for each conversation', () => {
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      // Check for spiritual topic indicators
      expect(screen.getByText(/dharma/)).toBeInTheDocument();
      expect(screen.getByText(/moksha/)).toBeInTheDocument();
      expect(screen.getByText(/karma/)).toBeInTheDocument();
    });

    test('preserves sacred text references in session previews', () => {
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      // Last messages should show spiritual content
      expect(screen.getByText(/Thank you for explaining dharma, Krishna/)).toBeInTheDocument();
      expect(screen.getByText(/कृष्ण जी, कर्म योग क्या है/)).toBeInTheDocument();
    });
  });

  describe('Accessibility', () => {
    test('provides accessible navigation for conversation history', () => {
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      // Should have proper ARIA labels and roles
      const sessionsList = screen.getByRole('list') || screen.getByLabelText(/conversation history/i);
      expect(sessionsList).toBeInTheDocument();
    });

    test('supports keyboard navigation', async () => {
      const user = userEvent.setup();
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      // Should be able to navigate with keyboard
      const searchInput = screen.getByPlaceholderText(/search conversations/i);
      searchInput.focus();
      expect(searchInput).toHaveFocus();

      await user.keyboard('{Tab}');
      
      // Next focusable element should receive focus
      const focusedElement = document.activeElement;
      expect(focusedElement).not.toBe(searchInput);
    });

    test('announces spiritual content appropriately for screen readers', () => {
      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      // Sanskrit/Hindi content should have language attributes
      const hindiTitle = screen.getByText('कर्म और भक्ति');
      expect(hindiTitle).toHaveAttribute('lang', 'hi');
    });
  });

  describe('Error Handling', () => {
    test('handles missing sessions gracefully', () => {
      const { conversationHistory } = require('../utils/conversationHistory');
      conversationHistory.getSessions.mockReturnValue([]);

      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      expect(screen.getByText(/no conversations/i)).toBeInTheDocument();
    });

    test('handles search errors gracefully', async () => {
      const user = userEvent.setup();
      const { conversationHistory } = require('../utils/conversationHistory');
      conversationHistory.searchSessions.mockImplementation(() => {
        throw new Error('Search failed');
      });

      render(
        <ConversationHistory
          onSessionSelect={mockOnSessionSelect}
          currentSessionId={null}
          onNewConversation={mockOnNewConversation}
        />
      );

      const searchInput = screen.getByPlaceholderText(/search conversations/i);
      await user.type(searchInput, 'dharma');

      // Should handle error gracefully without crashing
      expect(screen.getByText('Understanding Dharma')).toBeInTheDocument();
    });
  });
});
